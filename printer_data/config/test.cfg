#Macro Prompts
#This feature needs the [respond] module of Klipper. So please check if this is enabled in your Klipper config.
#https://docs.mainsail.xyz/overview/features/macro-prompts
# Supported Macro prompt commands:
#
# Example
# RESPOND TYPE=command MSG="action:prompt_begin MacroPrompt"
#
# action:prompt_begin <headline> ;first command to define a prompt. The <headline>-Attribute will be the headline of the prompt dialog.
# action:prompt_text <text> ;add a description text in the prompt.
# action:prompt_button <label>|<gcode?>|<color?> ;add a button in the prompt.
# action:prompt_button_group_start ;start a "button group". This will allow you to display multiple buttons in the same row.
# action:prompt_button_group_end ; close the current "button group"
# action:prompt_footer_button <label>|<gcode?>|<color?> ;add a button in the footer of the prompt
# action:prompt_show ;prompt dialog will be displayed
# action:prompt_end ;close/hide the prompt dialog.
#
#     <label>: Is the text inside of the button
#     <gcode?>: This attribute is optional to add a different G-Code to this button. (Default is the label text)
#     <color?>: This attribute is optional and will change the color of the button. Possible options are primary, secondary, info, warning, error. (Default is white)

# [gcode_macro _PROMPT_TEST_BUTTON_GROUPS]
# gcode:
#     RESPOND TYPE=command MSG="action:prompt_begin MacroPrompt"
#     RESPOND TYPE=command MSG="action:prompt_text These are all button colors"
#     RESPOND TYPE=command MSG="action:prompt_button default|TEST"
#     RESPOND TYPE=command MSG="action:prompt_button_group_start"
#     RESPOND TYPE=command MSG="action:prompt_button primary|TEST|primary"
#     RESPOND TYPE=command MSG="action:prompt_button secondary|TEST|secondary"
#     RESPOND TYPE=command MSG="action:prompt_button_group_end"
#     RESPOND TYPE=command MSG="action:prompt_button_group_start"
#     RESPOND TYPE=command MSG="action:prompt_button info|TEST|info"
#     RESPOND TYPE=command MSG="action:prompt_button warning|TEST|warning"
#     RESPOND TYPE=command MSG="action:prompt_button error|TEST|error"
#     RESPOND TYPE=command MSG="action:prompt_button_group_end"
#     RESPOND TYPE=command MSG="action:prompt_show"

# [gcode_macro _PROMPT_TEST]
# gcode:
#     RESPOND TYPE=command MSG="action:prompt_begin Question"
#     RESPOND TYPE=command MSG="action:prompt_text Do you want to close or test?"
#     RESPOND TYPE=command MSG="action:prompt_footer_button CLOSE|RESPOND TYPE=command MSG=action:prompt_end"
#     RESPOND TYPE=command MSG="action:prompt_footer_button TEST|TEST|error"
#     RESPOND TYPE=command MSG="action:prompt_show"

# [gcode_macro _PROMPT_TEST_RUNOUT]
# gcode:
#     RESPOND TYPE=command MSG="action:prompt_begin Filament Runout"
#     RESPOND TYPE=command MSG="action:prompt_text The filament sensor has detected a rounout. Please check the filament and click resume."
#     RESPOND TYPE=command MSG="action:prompt_button default|UNLOAD"
#     RESPOND TYPE=command MSG="action:prompt_button default|LOAD"
#     RESPOND TYPE=command MSG="action:prompt_button primary|PURGE"
#     RESPOND TYPE=command MSG="action:prompt_footer_button ABORT|CANCEL_PRINT|error"
#     RESPOND TYPE=command MSG="action:prompt_footer_button RESUME|RESUME|primary"
#     RESPOND TYPE=command MSG="action:prompt_show"

# [gcode_macro _PROMPT_TEST_PAUSED]
# gcode:
#     RESPOND TYPE=command MSG="action:prompt_begin Paused"
#     RESPOND TYPE=command MSG="action:prompt_text Print paused, choose an action."
#     RESPOND TYPE=command MSG="action:prompt_button default|UNLOAD"
#     RESPOND TYPE=command MSG="action:prompt_button default|LOAD"
#     RESPOND TYPE=command MSG="action:prompt_footer_button CANCEL|CANCEL_PRINT|error"
#     RESPOND TYPE=command MSG="action:prompt_footer_button RESUME|RESUME|primary"
#     RESPOND TYPE=command MSG="action:prompt_show"

# [gcode_macro _PROMPT_TEST_LOAD]
# gcode:
#     RESPOND TYPE=command MSG="action:prompt_begin Filament Load"
#     RESPOND TYPE=command MSG="action:prompt_text Loaded filament, check color and select an option"
#     RESPOND TYPE=command MSG="action:prompt_button_group_start"
#     RESPOND TYPE=command MSG="action:prompt_button unload|UNLOAD|error"
#     #RESPOND TYPE=command MSG="action:prompt_button load|LOAD|secondary"
#     RESPOND TYPE=command MSG="action:prompt_button purge more|PURGE|primary"
#     RESPOND TYPE=command MSG="action:prompt_button_group_end"
#     RESPOND TYPE=command MSG="action:prompt_footer_button continue|RESPOND TYPE=command MSG=action:prompt_end"
#     RESPOND TYPE=command MSG="action:prompt_show"


# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro TEST_ESTEPS]
gcode:
  M83
  G1 E100 F120

[gcode_macro TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    {% for i in range(iterations) %}
        # Large pattern
            # Diagonals
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_max} Y{y_max} F{speed*60}
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
            G0 X{x_min} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
            
            # Box
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_min} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
        
        # Small pattern
            # Small diagonals 
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_max} Y{y_center_max} F{speed*60}
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
            G0 X{x_center_min} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
            
            # Small box
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_min} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel / 2} 

    # Re-home and get position again for comparison:
        G28
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED

[gcode_macro PID_EXTRUDER]
description: PID Tune for the Extruder
gcode:
  {% set TARGET_TEMP = params.TARGET_TEMP|default(260)|float %} 
  PID_CALIBRATE HEATER=extruder TARGET={TARGET_TEMP}
  TURN_OFF_HEATERS
  SAVE_CONFIG

[gcode_macro PID_BED]
description: PID Tune for the Bed
gcode:
  {% set TARGET_TEMP = params.TARGET_TEMP|default(70)|float %} 
  PID_CALIBRATE HEATER=heater_bed TARGET={TARGET_TEMP}
  TURN_OFF_HEATERS
  SAVE_CONFIG

[gcode_macro _DUMP_VARIABLES]
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    
    {% set out = [] %}

    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    
    {action_respond_info(out|join("\n"))}

[gcode_macro TEST_PROBE_ACCURACY]
# Continuously run PROBE_ACCURACY while:
#     - idling for START_IDLE_MINUTES
#     - heating the bed to BED_TEMP
#     - once at BED_TEMP, letting the bed soak for BED_SOAK_MINUTES
#     - with the bed still on, heating the extruder to EXTRUDER_TEMP
#     - once at EXTRUDER_TEMP, letting the extruder soak for EXTRUDER_SOAK_MINUTES
#     - turning off the heaters, and idling for END_IDLE_MINUTES
variable_start_idle_minutes: 0
variable_bed_temp: 0
variable_extruder_temp: 0
variable_bed_soak_minutes: 0
variable_extruder_soak_minutes: 0
variable_dwell_seconds: 0
variable_dwell_lift_z: 0
variable_end_idle_minutes: 0
variable_state: 'start'
variable_next_state: 'none'
gcode:
    # Copy parameters into gcode variables.
    SET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=start_idle_minutes VALUE={ params.START_IDLE_MINUTES|default(5)|int }
    SET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_temp VALUE={ params.BED_TEMP|default(110)|int }
    SET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_temp VALUE={ params.EXTRUDER_TEMP|default(150)|int }
    SET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=bed_soak_minutes VALUE={ params.BED_SOAK_MINUTES|default(30)|int }
    SET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=extruder_soak_minutes VALUE={ params.EXTRUDER_SOAK_MINUTES|default(15)|int }
    SET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_seconds VALUE={ params.DWELL_SECONDS|default(1)|int }
    SET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=dwell_lift_z VALUE={ params.DWELL_LIFT_Z|default(-1)|int }
    SET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=end_idle_minutes VALUE={ params.END_IDLE_MINUTES|default(10)|int }

    # Initialize state variables in case they have old values from last run.
    SET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE='"start"'
    SET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE='"none"'

    # Schedule main loop.
    UPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=1


[delayed_gcode probe_accuracy_loop]
gcode:
    {% set tmacro = printer['gcode_macro TEST_PROBE_ACCURACY'] %}

    {% if tmacro.state == 'start' %}
        { action_respond_info('TEST_PROBE_ACCURACY: START') }
        SET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE='"start_idle"'
        SET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE='"start_idle_done"'
        UPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.start_idle_minutes|int * 60 }

    {% elif tmacro.state == 'start_idle_done' %}
        {% if tmacro.bed_temp >= 0 %}
            M140 S{ tmacro.bed_temp }
            { action_respond_info('TEST_PROBE_ACCURACY: BED HEATING TO %s' % tmacro.bed_temp) }
            SET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE='"bed_heating"'
        {% else %}
            # Skip heating and soaking the bed, go directly to bed_soaked state.
            SET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE='"bed_soaked"'
        {% endif %}

    {% elif tmacro.state == 'bed_heating' %}
        {% if printer.heater_bed.temperature >= tmacro.bed_temp %}
            { action_respond_info('TEST_PROBE_ACCURACY: BED HEATED TO %s' % tmacro.bed_temp) }
            SET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE='"bed_soaking"'
            SET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE='"bed_soaked"'
            UPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.bed_soak_minutes|int * 60 }
        {% endif %}

    {% elif tmacro.state == 'bed_soaked' %}
        {% if tmacro.bed_temp >= 0 %}
            { action_respond_info('TEST_PROBE_ACCURACY: BED SOAKED') }
        {% endif %}
        {% if tmacro.extruder_temp >= 0 %}
            M104 S{ tmacro.extruder_temp }
            { action_respond_info('TEST_PROBE_ACCURACY: EXTRUDER HEATING TO %s' % tmacro.extruder_temp) }
            SET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE='"extruder_heating"'
        {% else %}
            # Skip heating and soaking the extruder, go directly to extruder_soaked state.
            SET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE='"extruder_soaked"'
        {% endif %}

    {% elif tmacro.state == 'extruder_heating' %}
        {% if printer.extruder.temperature >= tmacro.extruder_temp %}
            { action_respond_info('TEST_PROBE_ACCURACY: EXTRUDER HEATED TO %s' % tmacro.extruder_temp) }
            SET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE='"extruder_soaking"'
            SET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE='"extruder_soaked"'
            UPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.extruder_soak_minutes|int * 60 }
        {% endif %}

    {% elif tmacro.state == 'extruder_soaked' %}
        {% if tmacro.extruder_temp >= 0 %}
            { action_respond_info('TEST_PROBE_ACCURACY: EXTRUDER SOAKED') }
        {% endif %}
        TURN_OFF_HEATERS
        SET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE='"end_idle"'
        SET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=next_state VALUE='"done"'
        UPDATE_DELAYED_GCODE ID=probe_accuracy_set_next_state DURATION={ tmacro.end_idle_minutes|int * 60 }

    {% elif tmacro.state == 'done' %}
        { action_respond_info('TEST_PROBE_ACCURACY: DONE') }
        G90
        G1 Z30
        UPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION=0

    {% endif %}

    {% if tmacro.state != 'done' %}
        M105
        PROBE_ACCURACY
        {% if tmacro.dwell_lift_z >= 0 %}
            G1 Z{ tmacro.dwell_lift_z }
        {% endif %}
        M400
        UPDATE_DELAYED_GCODE ID=probe_accuracy_loop DURATION={ tmacro.dwell_seconds }
    {% endif %}

[delayed_gcode probe_accuracy_set_next_state]
gcode:
    {% set tmacro = printer['gcode_macro TEST_PROBE_ACCURACY'] %}
    SET_GCODE_VARIABLE MACRO=TEST_PROBE_ACCURACY VARIABLE=state VALUE='"{ tmacro.next_state }"'

[delayed_gcode GANTRY_SERVO_INIT]
initial_duration: 5
gcode:
    _CUTTER_SERVO POS=out
    G4 P1500 # Pause to ensure servo is fully out
    _CUTTER_SERVO POS=in
    UPDATE_DELAYED_GCODE ID=GANTRY_SERVO_INIT DURATION=0
