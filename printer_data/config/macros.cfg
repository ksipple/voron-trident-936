#####################################################################
#   Macros
#####################################################################

[gcode_macro PLATE_TEXTURED]
gcode:
  SET_GCODE_OFFSET Z=-0.08 ;MOVE=1

[gcode_macro PLATE_SMOOTH]
gcode:
  SET_GCODE_OFFSET Z=0.00 ;MOVE=1

[gcode_macro M600]
description: Filament Change
gcode:
  #SFS_DISABLE                 ; Disable Smart Filament Sensor
  PAUSE
  #CHANGE_TUNE

[gcode_macro M601]
description: Pause
gcode:
  PAUSE

[gcode_macro M602]
description: Resume
gcode:
  RESUME

# Conditional G28 (home if not already homed)
[gcode_macro CG28]
gcode:
    STATUS_HOMING
    {% if "x" not in printer.toolhead.homed_axes or "y" not in printer.toolhead.homed_axes or "z" not in printer.toolhead.homed_axes %}
    G28
    {% endif %}

#Home, Z-tilt, Home
[gcode_macro G32]
gcode:
    STATUS_HOMING
    BED_MESH_CLEAR
    CG28                       ; Home if not homed to get everything turned on
    Z_TILT_ADJUST              ; Level
    G28 Z                      ; Home Z

### This is to allow use of slicer M73 est time update (Prusa/Marlin based)
### Activated in SuperSlicer Printer / General / Firmware
### Modify M73 ###
[gcode_macro M73]
rename_existing: M73.1
variable_p: 0.0
variable_r: 0.0
gcode:
  # Use a default 0 if _P is omitted.
  {% set P = params.P|default(0)|int %}
  # Use a default 0 if _R is omitted.
  {% set R = params.R|default(0)|int %}
  M73.1 P{P}
  SET_GCODE_VARIABLE MACRO=M73 VARIABLE=p VALUE={P}
  SET_GCODE_VARIABLE MACRO=M73 VARIABLE=r VALUE={R}

## show remaining time ## 
[display_template _printing_time]
text:
  {% set ptime = printer["gcode_macro M73"].r %}
  { "%02d:%02d" % (ptime // 60, ptime % 60) }

[gcode_macro M900]
gcode:
  #Linear Advance from slicer
  #M900 [K<kfactor>] [E<kfactor>]
  {% if 'K' in params %}
    {% if 'E' in params %}
      SET_PRESSURE_ADVANCE EXTRUDER={params.E} ADVANCE={params.K}
    {% else %}
      SET_PRESSURE_ADVANCE ADVANCE={params.K}
    {% endif %}
  {% endif %}

[gcode_macro OFF]
gcode:
    M84                                        ; turn steppers off
    TURN_OFF_HEATERS                           ; turn bed / hotend off
    M107                                       ; turn print cooling fan off
    LIGHTS_OFF
    #FANS_OFF

[gcode_macro _PZ_PROBING_Z]
gcode:
  M107 ;part fan off
  SET_TMC_CURRENT STEPPER=stepper_z CURRENT=0.3 ;0.35 ;0.4
  SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT=0.3
  SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT=0.3

[gcode_macro _PZ_NORMAL_Z]
gcode:
  #M106 S255 ;hotend fan 100%
  {% set run_current = printer.configfile.config['tmc2209 stepper_z'].run_current | float %}
  SET_TMC_CURRENT STEPPER=stepper_z CURRENT={run_current}
  SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={run_current}
  SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT={run_current}

[gcode_macro _CLIENT_EXTRUDE]
description: Extrudes, if the extruder is hot enough
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
  {% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
  {% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
  {% set absolute_extrude = printer.gcode_move.absolute_extrude %}
  ##### end of definitions #####
  {% if printer.toolhead.extruder != '' %}
    {% if printer[printer.toolhead.extruder].can_extrude %}
      {% if use_fw_retract %}
        {% if length < 0 %}
          G10
        {% else %}
          G11
        {% endif %}
      {% else %}
        M83
        G1 E{length} F{(speed|float|abs) * 60}
        {% if absolute_extrude %}
          M82
        {% endif %}
      {% endif %}
    {% else %}
      RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
    {% endif %}
  {% endif %}

[gcode_macro _CLIENT_RETRACT]
description: Retracts, if the extruder is hot enough
gcode:
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
  {% set speed = params.SPEED|default(client.speed_retract)|default(35) %}

  _CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[gcode_macro _CLIENT_LINEAR_MOVE]
description: Linear move with save and restore of the gcode state
gcode:
  {% set x_move = "X" ~ params.X if params.X is defined else "" %}
  {% set y_move = "Y" ~ params.Y if params.Y is defined else "" %}
  {% set z_move = "Z" ~ params.Z if params.Z is defined else "" %}
  {% set e_move = "E" ~ params.E if params.E is defined else "" %}
  {% set rate = "F" ~ params.F if params.F is defined else "" %}
  {% set ABSOLUTE = params.ABSOLUTE | default(0) | int != 0 %}
  {% set ABSOLUTE_E = params.ABSOLUTE_E | default(0) | int != 0 %}
  SAVE_GCODE_STATE NAME=_client_movement
  {% if x_move or y_move or z_move %}
    G9{ 0 if ABSOLUTE else 1 }
  {% endif %}
  {% if e_move %}
    M8{ 2 if ABSOLUTE_E else 3 }
  {% endif %}
  G1 { x_move } { y_move } { z_move } { e_move } { rate }
  RESTORE_GCODE_STATE NAME=_client_movement

# Spoolman set spool
[gcode_macro SET_ACTIVE_SPOOL]
gcode:
  {% if params.ID %}
    {% set id = params.ID|int %}
    {action_call_remote_method(
       "spoolman_set_active_spool",
       spool_id=id
    )}
  {% else %}
    {action_respond_info("Parameter 'ID' is required")}
  {% endif %}

[gcode_macro CLEAR_ACTIVE_SPOOL]
gcode:
  {action_call_remote_method(
    "spoolman_set_active_spool",
    spool_id=None
  )}


#####################
# Custom AFC Macros #
#####################
[gcode_macro EJECT_ALL]
description: AFC Eject All Lanes
gcode:
      BT_LANE_EJECT LANE=1
      BT_LANE_EJECT LANE=2
      BT_LANE_EJECT LANE=3
      BT_LANE_EJECT LANE=4

[gcode_macro AFC_RECOVERY]
#afc_recovery lane=X
description: Sets the lane to loaded, then unloads the tool, and re-attempts the load
gcode:
     {% set lane_num = params.LANE|default(1)|int %}
     {% set stepper = printer['gcode_macro _AFC_GLOBAL_VARS'].stepper_name|string %}
     SET_LANE_LOADED LANE={stepper ~ lane_num}
     BT_TOOL_UNLOAD
     BT_CHANGE_TOOL LANE={lane_num}

[gcode_macro AFC_PRIME]
#AFC Park, Poop, Wipe, Kick, Wipe, Park
description: Prime already loaded tool
gcode:
    AFC_PARK
    AFC_POOP ;PURGE_LENGTH=70
    AFC_WIPE
    AFC_KICK
    AFC_WIPE
    AFC_PARK
    
    